$black: #333;
$white: #fff;
$dark-gray: #494949;
$light-gray: #7C7A7A;
$space-cadet: #2C2A4A;
$light-green: #7CE577;
$dark-green: #537A5A;
$sky-blue: #7FDEFF;
$cyan: #1C7293;
$blue: #3772FF;
$purple-navi: #4F518C;
$corn: #FFF275;
$honey: #F7B32B;
$mango: #FF8C42;
$rose: #DF2935;
$pink: #FF5D73;

@mixin buttonReset {
  border: none;
  outline: none;
  padding: .75rem 2.5rem;
  background-color: transparent;
  position: relative;
  cursor: pointer;
  border-radius: .2rem;
  font-size: 1.05rem;
}

@mixin backgrounding($bg-color, $font-color, $border: null) {
  @if $border {
    border: $border;
  }

  background-color: $bg-color;
  color: $font-color;
  transition-duration: .2s;

  &:hover {
    background-color: lighten($bg-color, 2.5%);
    -webkit-box-shadow: 0px 0px 20px 0px $bg-color; 
    box-shadow: 0px 0px 20px 0px $bg-color;
  }

  &:active {
    background-color: darken($bg-color, 2.5%);
  }
}

@mixin gradient-shadow($left-color, $right-color) {
  &::before {
    content: "";
    z-index: -1;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: linear-gradient(-45deg, $left-color 0%, $right-color 100% );
    transform: translate3d(0px, 0px, 0) scale(0.95);
    filter: blur(20px);
    opacity: var(0.7);
    transition: opacity 0.3s;
    border-radius: inherit;
  }

  /* 
  * Prevents issues when the parent creates a 
  * stacking context. (For example, using the transform
  * property )
  */
  &::after {
      content: "";
      z-index: -1;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background: inherit;
      border-radius: inherit;
  }
}
        